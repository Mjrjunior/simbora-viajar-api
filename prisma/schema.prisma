generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum TripMemberRole {
  ADMIN
  EDITOR
  VIEWER
}

enum ActivityType {
  PLACE
  RESTAURANT
  EVENT
  OTHER
}

enum InviteStatus {
  pending
  accepted
  rejected
}

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  name            String
  userName        String        @unique @map("user_name")
  password        String
  avatarUrl       String?       @map("avatar_url")
  role            UserRole      @default(USER)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  Trip            Trip[]
  TripMembers     TripMembers[]
  InvitesSent     Invite[]      @relation("InvitesSent")
  InvitesReceived Invite[]      @relation("InvitesReceived")

  @@map("users")
}

model Trip {
  id          String    @id @default(cuid())
  title       String
  destination String
  startDate   DateTime?
  endDate     DateTime?
  description String?
  createdBy   String    @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  user        User          @relation(fields: [createdBy], references: [id])
  TripMembers TripMembers[]
  Activities  Activities[]
  Invite      Invite[]

  @@map("trips")
}

model TripMembers {
  id        String         @id @default(cuid())
  tripId    String         @map("trip_id")
  userId    String         @map("user_id")
  role      TripMemberRole @default(EDITOR)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  deletedAt DateTime?      @map("deleted_at")

  trip Trip @relation(fields: [tripId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([tripId, userId])
  @@map("trip_members")
}

model Activities {
  id          String       @id @default(cuid())
  description String
  location    String
  notes       String
  type        ActivityType @default(OTHER)
  startDate   DateTime?
  endDate     DateTime?
  tripId      String       @map("trip_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")

  trip Trip @relation(fields: [tripId], references: [id])

  @@map("activities")
}

model Invite {
  id            String       @id @default(uuid())
  tripId        String       @map("trip_id")
  invitedById   String       @map("invited_by_id")
  emailInvited  String       @map("email_invited")
  invitedUserId String?      @map("invited_user_id")
  token         String?      @unique
  status        InviteStatus @default(pending)
  createdAt     DateTime     @default(now()) @map("created_at")
  expiresAt     DateTime?    @map("expires_at")
  canceledAt    DateTime?    @map("canceled_at")

  trip        Trip  @relation(fields: [tripId], references: [id])
  invitedBy   User  @relation("InvitesSent", fields: [invitedById], references: [id])
  invitedUser User? @relation("InvitesReceived", fields: [invitedUserId], references: [id])

  @@map("invites")
}
